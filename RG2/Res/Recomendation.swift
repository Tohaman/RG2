//
//  Recomendation.swift
//  RG2
//
//  Created by Anton on 12.12.2018.
//  Copyright © 2018 RubicsGuide. All rights reserved.
//

import Foundation

struct Recomend: Phases {
    func phase() -> String {
        let phase = "RECOMEND"
        return phase
    }
    
    func titles() -> [String] {
        return title
    }
    
    func images() -> [String] {
        return image
    }
    
    func descs() -> [String] {
        return description
    }
    
    func urls() -> [String] {
        return url
    }
    
    func comments() -> [String] {
        return []
    }
    
    let title = [
        st1_title,
        st2_title,
        st3_title,
        st4_title
    ]
    
    let image = [
        "main_1",
        "main_1",
        "main_1",
        "main_1"
    ]
    
    let url = [
        st1_url,
        st2_url,
        st3_url,
        st4_url
    ]
    
    
    let description = [
        st1_description,
        st2_description,
        st3_description,
        st4_description
    ]
    
    
    static let st1_title = "F.A.Q."
    static let st1_description = """
    <p>Здравствуйте, если вы уже умеете или когда-то учились собирать кубик Рубика, то обязательно прочтите этот текст до конца.</p>

    <p>Прежде чем писать отзыв/пожелание/вопрос о приложении в PlayMarket, поищите ответ в тексте ниже:<br/><br/>

    1. Автора программы зовут Розов Антон, связаться с ним можно написав письмо на <a href="mailto:rubicsguide@yandex.ru?subject=Вопрос%20по%20RG2&body=Здравствуйте,%20Антон.">rubicsguide@yandex.ru</a>.<br/><br/>

    2. В программе приведены две методики для начинающих, одна моя, вторая - Максима Чечнева, подробнее о нем вы можете узнать на его канале в YouTube или на его <a href="http://maximchechnev.com/">сайте.</a><br/><br/>

    3. Выделенный текст является ссылкой на видео, именно с того момента о котором говорится в тексте, внешний ресурс или другую обучалку из программы. И это одна из главных \"фишек\" программы.<br/><br/>

    4. Если вы только начинаете изучать метод Фридрих, то крайне рекомендую сначала перейти на одну из методик для начинающих приведенных в программе или хотя бы ознакомиться с терминологией <a href="rg2://ytplay?time=8:22&link=u1CA_35lRAI">применяемой в программе</a> и узнать что такое
        <a href="rg2://ytplay?time=11:15&link=8VCsFNFa5yM"><b>\"Лондон\",</b></a>
        <a href="rg2://ytplay?time=8:16&link=ku-FyZvD48Q"><b>\"свет\"</b></a> и
        <a href="rg2://ytplay?time=7:58&link=8VCsFNFa5yM"><b>\"крыша\".</b></a>
        И почему они так называются. Возможно это не лучшие ассоциации, но на мой взгляд в любом случае <a href="rg2://ytplay?time=8:51&link=u1CA_35lRAI"><b>\"В Лондон\",</b></a> гораздо легче для запоминания, чем \"передняя грань по часовой стрелке\".<br/><br/>

    5. На все претензии типа: \"дурацкие названия, я бы назвал это так и так\", у меня один ответ - снимите свое достойное обучающее видео, напишите к нему текст и я с радостью добавлю его в программу. К тому же, для всех алгоритмов в программе есть формулы и <a href="rg2://ytplay?time=3:52&link=u1CA_35lRAI">объяснение языка вращений.</a><br/><br/>

    6. К каждому тексту (этапу) в программе есть видео в конце текста. Если вам из текста что-то непонятно, то посмотрите видео целиком, а лучше пощелкайте по ссылкам в тексте.<br/><br/>

    7. Программа абсолютно бесплатна, не содержит никакой рекламы и никому ничего не навязывает, поэтому если она вам понравилась, пожалуйста поддержите проект материально (сказать \"спасибо\" в основном меню программы). Если не понравилась - просто удалите ее со своего устройства.<br/><br/>

    8. Найденные ошибки, опечатки, дельные советы лучше присылайте на почту <a href="mailto:rubicsguide@yandex.ru?subject=Вопрос%20по%20RG2&body=Здравствуйте,%20Антон.">rubicsguide@yandex.ru</a>.<br/><br/>

    9. В планах есть добавление обучалок по другим головоломкам, но написание обучалок, особенно если к ним еще нужно и свое видео, требует очень много времени, поэтому, если у вас есть желание помочь - <a href="mailto:rubicsguide@yandex.ru?subject=Предложение%20по%20RG2&body=Здравствуйте,%20Антон.">пишите на почту.</a><br/><br/>

    Спасибо, что дочитали этот текст до конца.<br/><br/>

    С уважением, Розов Антон.<br/> <a href="mailto:rubicsguide@yandex.ru?subject=Вопрос%20по%20RG2&body=Здравствуйте,%20Антон.">rubicsguide@yandex.ru</a></p>
    """
    static let st1_url = ""
    
    static let st2_title = "Методики из программы vs \"Другие\" методики."
    static let st2_description = """
    <p>Если вам интересно, почему в программе приведены именно эти методики сборки для начинающих - напишите на почту <a href="mailto:rubicsguide@yandex.ru?subject=Вопрос%20по%20методикам&body=Здравствуйте,%20Антон.">rubicsguide@yandex.ru</a>, я обязательно вам отвечу, и наверняка дополню этот раздел соответствующим текстом.</p>
    """
    static let st2_url = ""
    
    static let st3_title = "С чего начать?"
    static let st3_description = """
    <p>Начать стоит с основной \"фишки\" программы - возможности не только прочитать о какой-то головоломке, но и посмотреть нужный момент в видео, если вам что-то непонятно из текста. Например, вы видите в тексте слово <a href="rg2://ytplay?time=0:41&link=QJ8-8l9dQ_U">\"Алгоритм\"</a>, которое выделено цветом. Значит, можно по нему щелкнуть и посмотреть в видео, именно тот момент, как выполнять данный алгоритм.</p>

        <p>Не стесняйтесь смотреть эти видео, многие моменты в сборке кубика довольно трудно передать
        словами, в то время, как в видео это очень просто показать и объяснить. С другой стороны,
        если вам нужно только немного вспомнить формулу для алгоритма, то ее гораздо быстрее можно
        найти именно в тексте, чем в видео.</p>

        <p>Для начала освойте любую методику сборки кубика. В программе их две: первая от автора
        программы <b>Антона Розова</b>, а вторая от <b>Максима Чечнева</b>. Методика Максима немного
        попроще и подойдет для детей от 7 лет, а методика Антона более \"правильная\", но она, возможно,
        чуть-чуть сложнее, зато с нее вам будет легче научиться собирать кубик быстро и перейти на
        скоростную сборку по методу Джесики Фридрих.</p>

        <p>Теперь, немного подробнее о том, как осваивать продвинутую, скоростную сборку (IMHO),
        я специально нигде не указываю никаких сроков, сколько времени нужно потратить на то
        или иное обучение - это все очень индивидуально, главное последовательность обучения.</p>

        <p>1. Первым делом рекомендую перейти на сборку кубика по
        <a href="rg2://pager?phase=ROZOV&item=0">моей методике,</a>
        <a href="rg2://pager?phase=BEGIN&item=1">методике Максима,</a> А.Кима или
        любой другой методике, в которой при сборке верхнего слоя сначала все элементы
        делаются одного цвета (крыша красится), а потом расставляются на свои места.
        Это необходимо, для плавного перехода к скоростной методике через Ускорения и
        для постепенного изучения F2L/OLL/PLL алгоритмов.</p>

        <p>2. Дальше начните изучать Ускорения для начинающих. Почему именно ускорения, а не сразу PLL/OLL.
        Казалось бы Ускорения это те же самые PLL/OLL алгоритмы, но… это самые нужные,
        простые, часто встречающиеся, а соответственно самые полезные PLL/OLL алгоритмы. К тому же,
        многие из них являются частью/основой других алгоритмов, и вам будет проще учить другие
        алгоритмы, зная алгоритмы из Ускорений.</p>

        <p>3. Изучайте не только формулы, но и обязательно фингертриксы. Хотите собирать кубик быстро
        - подключайте мышечную память. Дело тут в психологии и физиологии человека, если вы будете
        обдумывать каждое вращение \"головой\", то у вас не получится крутить кубик быстро.
        Должно быть так: подумали \"пиф-паф\", а руки сами сделали 4 хода. Подумали "Рыбка",
        а руки уже крутят 7-ми ходовую комбинацию.</p>

        <p>4. После ускорений ускоряйте сборку креста (Крест за 8 ходов). Видео
        по кресту от Максима посмотреть тоже будет полезно, но не обязательно.</p>

        <p>5. После, а может и вместе с крестом осваивайте интуитивный F2L. Крест и интуитивный
        F2L - это два этапа, которые легко решаются \"головой\", но как я уже говорил, \"голова\" делает
        это медленно. Поэтому, чтобы делать их быстро, ваш мозг должен научиться сначала распознавать все то
        разнообразие ситуаций, которое встречается на данных этапах, а потом еще и придумать решение
        (точнее научится быстро находить его в памяти).
        И вот именно поэтому, эти этапы нужно очень и очень много тренировать. Гораздо больше, чем
        PLL или OLL.</p>

        <p>6. После того, как вы начнете собирать кубик используя F2L, начните изучать PLL. Алгоритмов
        там не так уж и много. Да и если вы уже выучили Ускорения, то соответственно знаете и некоторые
        PLL алгоритмы. Но заметьте, что для многих PLL ситуаций в программе приведены несколько алгоритмов,
        выберите тот, который вам больше подходит. Единственный совет - не ориентируйтесь на то, какой
        алгоритм легче запомнить, гораздо важнее какой алгоритм вам легче выполнять, т.к. опять же
        когда вы его доведете до автоматизма, вы уже даже наверняка забудете его формулу.</p>

        <p>7. В процессе изучения PLL, вы при сборках кубика с нуля (а кубик у вас периодически будет
        разбираться даже при тренировках PLL, и это абсолютно нормально), вы поймете какие из ситуаций
        интуитивного F2L вам особенно не нравятся. Поэтому посмотрите для них быстрые (ну иногда и не очень)
        решения в Жизненном F2L или Advanced F2L. Учитесь загонять пару не только в передний правый слот.</p>

        <p>8. Развивайте свой LookAhead (взгляд вперед), научитесь, особенно на этапе F2L, выполнять
        алгоритмы равномерно. Как я уже не раз писал, сборка кубика это не только время выполнения
        алгоритмов, но и время, которое вы тратите на определение сложившейся ситуации. И когда
        вы крутите алгоритм на максимальной скорости, опять же, в силу физиологических особенностей
        организма, вы не сможете \"думать и смотреть\" вперед. Для тренировки равномерности вращения
        в таймере программы предусмотрен метроном.<br/>
        Очень показательный пример равномерной сборки, с очень медленным вращением граней
        <a href="rg2://ytplay?time=7:00&link=Wlnrv13fWec">от Евгения Бондаренко.</a>
        В вот примеры равномерной и рваной сборок <a href="rg2://ytplay?time=0:52&link=4nSnsav3bIU">от Дилана.</a>
        Надеюсь разница очевидна.</p>

        <p>9. Ну и уже после PLL переходить к изучению OLL, COLL, WinterVariation, VLS и т.д.</p>
    """
    static let st3_url = ""
    
    static let st4_title = "Немного терминологии"
    static let st4_description = """
    <p> Термины, которые должен знать каждый, кто занимается спидкубингом.<br/><br/>

    <b>1. <a href="rg2://ytplay?time=0:00&link=4nSnsav3bIU">Sexy Move</a></b>
    - в русском варианте <b>пиф-паф</b>. Простая четырехходовая комбинация <b>R U R\' U\'</b>. Ну а почему в
    английском варианте это так называется,
    <a href="rg2://ytplay?time=0:06&link=4nSnsav3bIU">смотрите в видео</a> :)))<br/><br/>

    <b>2. <a href="rg2://ytplay?time=0:18&link=4nSnsav3bIU">TPS</a></b> = Turns Per Second -
    количество ходов (поворотов) в секунду. Величина позволяющая оценить на сколько быстро вы
    крутите кубик. Чтобы оценить свой TPS выполните какую-то достаточно длинную комбинацию и заметьте
    время за которое вы это сделаете. Теперь поделите количество сделанных ходов, на время. Например
    <a href="rg2://ytplay?time=0:35&link=4nSnsav3bIU">Рыбку</a>, в которой семь ходов.<br/>
    Но, то что вы крутите кубик очень быстро не означает что вы быстро собираете кубик.
    <a href="rg2://ytplay?time=0:52&link=4nSnsav3bIU">Иначе говоря</a>,
    именно потому, что вы крутите слишком быстро, вы не сможете сохранять высокий TPS для всей сборки.
    Т.к. между выполнениями комбинаций у вас будут бОльшие паузы. Гораздо эффективнее, вращать кубик
    медленнее (равномернее), но без пауз между комбинациями.<br/><br/>

    <b>3. <a href="rg2://ytplay?time=1:42&link=4nSnsav3bIU">Sune</a></b> = Рыбка из Ускорения N2,<br/>
    <b><a href="rg2://ytplay?time=2:07&link=4nSnsav3bIU">Antisune</a></b> = Акула из Ускорения N11,<br/>
    <b><a href="rg2://ytplay?time=2:13&link=4nSnsav3bIU">Pi</a></b> = Вертолет из Ускорения N14,<br/>
    <b><a href="rg2://ytplay?time=2:19&link=4nSnsav3bIU">U</a></b> = Глазки из Ускорения N13,<br/>
    <b><a href="rg2://ytplay?time=2:27&link=4nSnsav3bIU">T</a></b> = Ушки из Ускорения N8,<br/>
    <b><a href="rg2://ytplay?time=2:30&link=4nSnsav3bIU">L</a></b> = Носик из Ускорения N9<br/> и
    <b><a href="rg2://ytplay?time=2:39&link=4nSnsav3bIU">H</a></b> = НТВ+ из Ускорения N8.<br/>
    Данные алгоритмы объединены в один блок как базовые (крестовые) OLL алгоритмы.<br/><br/>

    <b>4. <a href="rg2://ytplay?time=2:43&link=4nSnsav3bIU">2-gen</a></b> = Turns 2 Layer,
    вращение двух слоев. Проще говоря, 2-gen алгоритмы, это такие алгоритмы, при выполнении которых вращаются только
    2 слоя. Чаще всего R и U. Например: пиф-паф, рыбка, PLL окошки, PLL рельсы. Такие алгоритмы можно
    выполнять очень быстро (с высоким TPS) и они очень удобны для сборки
    <a href="rg2://ytplay?time=3:16&link=4nSnsav3bIU">одной рукой</a>(One Hand).
    <b>3-gen</b> алгоритмы - соответственно те, при выполнении которых, вращаются 3 грани.<br/><br/>

    <b>5. <a href="rg2://ytplay?time=3:22&link=4nSnsav3bIU">Average vs Mean</a></b> - Усредненное
    и среднее время. Если дословно переводить с агнглийского, то и mean time и average time означает
    среднее время (сборки). Но считается оно по разному. Mean time - это суммарное время всех
    попыток поделенное на количество попыток, т.е. точное среднее время. В то время как Average это более
    абстрактное понятие, скорее не среднее, а усредненное время. Т.е. при его расчете, например не берутся
    лучший и худший результат. Или под понятием Average time может пониматься примерное среднее время
    сборок.<br/><br/>

    <b>6. <a href="rg2://ytplay?time=4:27&link=4nSnsav3bIU">Sleagehammer</a></b> -
    Кувалда или Английский пиф-паф <b>(R\' F R F\')</b>. Еще одна простая четырехходовка из Ускорения N1.
    Используется как часть многих алгоритмов. Так же можно использовать и как альтернативу первому
    базовому <b>U (R U\' R\')</b> алгоритму интуитивного F2L, особенно при постановке на свое место
    <a href="rg2://ytplay?time=4:42&link=4nSnsav3bIU">последней пары </a>. А в
    <a href="rg2://ytplay?time=4:54&link=4nSnsav3bIU">такой ситуации</a> и вовсе можно
    получить OLL Skip.<br/><br/>

    <b>7. <a href="rg2://ytplay?time=4:56&link=4nSnsav3bIU">AUF</a></b> - Adjust Upper Face.
    Установка верхней грани - установочные ходы для PLL алгоритмов, а также
    установка на свое место собранной верхней грани после PLL алгоритма. Обычно быстрее крутить верх,
    чем делать перехваты.<br/><br/>

    <b>8. <a href="rg2://ytplay?time=5:21&link=4nSnsav3bIU">CFOP, Roux, ZZ</a></b><br/>
    <b>CFOP</b> = Cross, F2L, OLL, PLL. Скоростной метод сборки, которым пользуется большинство спидкуберов.
    Так же известен как метод Джесики Фридрих. Как видно из названия состоит из последовательной
    сборки креста (Cross), первых двух слоев (F2L),
    ориентации последнего слоя (OLL) и перестановки последнего слоя (PLL).<br/><br/>

    <b>Roux</b> (читается как Ру)- альтернативный скоростной метод сборки кубика. Даже если он
    не станет вашим основным методом сборки, очень рекомендую хотя бы научиться собирать кубик
    этим методом, т.к. он очень интуитивный и способствует лучшему пониманию кубика. Обучалку
    вы можете найти в соответствующем разделе программы.<br/><br/>

    <b>ZZ</b> - еще один метод, суть которого в первоначальном правильном ориентировании ребер.<br/><br/>

    <b>9. <a href="rg2://ytplay?time=7:37&link=4nSnsav3bIU">COLL vs OLLCP</a></b><br/>
    <b>COLL</b> = Corners & OLL (углы и OLL),<br/>
    <b>OLLCP</b> = OLL & Corner Permutation (OLL и установка углов
    на свои места). Результат и тех и других алгоритмов одинаков - PLL с углами на своих местах,
    т.е. окошки, рельсы, шахматы или PLL скип. Но OLLCP - это набор алгоритмов для любой OLL ситуации,
    а COLL только для ситуации, когда желтый крест уже собран. Более подробно про <b>COLL</b> можно
    посмотреть в соответствующем разделе программы.<br/>
    <b>ZBLL</b> = Zborowski-Bruchem Last Layer, расширенный набор COLL алгоритмов, в которых происходит расстановка на
    свои места не только углов, но и ребер, т.е. однозначный скип PLL этапа. Но и ситуаций тут уже
    значительно больше, около 500 в отличие от COLL, где их всего 40.<br/><br/>

    <b>10. <a href="rg2://ytplay?time=8:51&link=4nSnsav3bIU">Metrics</a></b>
    Метрики - различные варианты подсчета ходов.<br/>
    <b><a href="rg2://ytplay?time=9:15&link=4nSnsav3bIU">STM</a></b>
    = Slice Turn Metric. Метрика в которой ходы среднего слоя (M, S) считаются как один ход.
    Вот <a href="rg2://ytplay?time=9:23&link=4nSnsav3bIU">пример подсчета</a> STM
    ходов для алгоритма <b>M2 U\' M U2 M\' U\' M2</b>.<br/>
    <b><a href="rg2://ytplay?time=9:32&link=4nSnsav3bIU">HTM</a></b>
    = Half Turn Metric. В HTM ходы среднего слоя считаются как 2 хода, т.е. как последовательные
    ходы боковых граней. Например тот же самый алгоритм <b>M2 U\' M U2 M\' U\' M2</b> в метрике HTM
    будет подсчитан как 11 ходов.<br/>
    <b><a href="rg2://ytplay?time=9:53&link=4nSnsav3bIU">QTM</a></b>
    = Quarter Turn Metric. В данной метрике поворот любой грани на 90 градусов означает один ход.
    Т.е. ход типа R2 или U2 в данной метрике будет считаться как 2 хода.<br/>
    <b><a href="rg2://ytplay?time=9:53&link=4nSnsav3bIU">ETM</a></b>
    = Execution Turn Metric. Тут все еще интереснее, как видно из названия,
    в данной метрике количество ходов зависит от того как вы исполняете данный алгоритм. Т.е.
    одно действие = один ход. Например, если вы
    <a href="rg2://ytplay?time=10:15&link=4nSnsav3bIU">делаете U2 так</a>,
    то это 2 хода, а <a href="rg2://ytplay?time=10:18&link=4nSnsav3bIU">если так</a>,
    то один. Так же в ETM перехват куба считается за один ход.<br/><br/>

    <b>11. <a href="rg2://ytplay?time=0:00&link=XhjQNdEaHJw">VLS</a></b>
    Valk Last Slot - алгоритмы позволяющие решать OLL без постановки на место последней пары F2L.
    Называются так в честь разработчика и популяризатора этой методики Матса Валька (Mats Valk).
    Методика включает в себя порядка 200 алгоритмов. Поэтому для начала можно освоить
    <b><a href="rg2://ytplay?time=0:20&link=XhjQNdEaHJw">Winter Variation</a></b>.
    Данные алгоритмы являются частью VLS и отличаются тем, что крест на верхней стороне уже собран
    и соответственно таких алгоритмов уже меньше - всего 27. И найти их
    <a href="rg2://ytplay?time=0:00&link=rbRJWAH_pts">можно тут.</a><br/><br/>

    продолжение следует…
    </p>
    """
    static let st4_url = ""
}
