//
//  Cylinder.swift
//  RG2
//
//  Created by Anton on 09/03/2019.
//  Copyright © 2019 RubicsGuide. All rights reserved.
//

import Foundation
struct Cylinder: Phases {
    func phase() -> String {
        let phase = "CYLINDER"
        return phase
    }
    
    func titles() -> [String] {
        return title
    }
    
    func images() -> [String] {
        return image
    }
    
    func descs() -> [String] {
        return description
    }
    
    func urls() -> [String] {
        return url
    }
    
    func comments() -> [String] {
        return []
    }
    
    let title = [
        st1_title,
        st2_title,
        st3_title,
        st4_title,
        st5_title,
        st6_title
    ]
    
    let image = [
        "cylinder_1",
        "cylinder_2",
        "cylinder_3",
        "cylinder_4",
        "cylinder_5",
        "cylinder_6"
    ]
    
    let url = [
        st1_url,
        st2_url,
        st3_url,
        st4_url,
        st5_url,
        st6_url
    ]
    
    
    let description = [
        st1_description,
        st2_description,
        st3_description,
        st4_description,
        st5_description,
        st6_description
    ]
    
    
    static let st1_title = "1. Белый крест"
    static let st1_description = """
    <p>Цилиндр - очень простая модификация кубика 3х3. Простота цилиндра в том, что расположение элементов на верхней и нижней гранях не имеет никакого значения, т.к. все элементы взаимозаменяемы. Все уголки верхней грани – одинаковые и все ребра тоже одинаковые, ну и с нижней гранью та же ситуация.</p>
    <p style="text-align:center"><img src="cylinder_1_1.xml" width="20%%"></p>

    <p>Cо средним слоем, тут все тоже довольно просто – все четыре ребра между собой одинаковые и отличаются от других ребер не только формой, но и цветом. К тому же, они симметричные, а значит их ориентация не имеет значения, хотя это и приводит к тому, что есть шанс появления паритета. Ведь в кубике алгоритмами нельзя развернуть только одно ребро, т.е. если мы поставим одно ребро среднего слоя неправильно, то не сможем правильно развернуть все ребра верхнего или нижнего слоя. Ну а как решить этот паритет я обязательно расскажу чуть позже.</p>

    <p>Надеюсь, что с элементами в этой головоломке все понятно и не нужно подробно рассказывать, где у нее центры, где ребра, а где уголки. Давайте перейдем сразу к сборке.</p>
     
    <p>Собирать эту головоломку, как и кубик можно с абсолютно любой стороны, но проще всего начинать с белой или желтой, если у вас стандартная расцветка головоломки. А если у вас расцветка отличается от стандартной, то смотрим на любой уголок, точнее на его плоскую сторону и собираем головоломку именно со стороны такого цвета.</p>

    <p style="text-align:center"><img src="cylinder_1_2.xml" width="20%%"></p>
    <p>Первым делом соберем крест вокруг белого центра. Находим белый центр и берем головоломку этим центром вверх. Тут все абсолютно аналогично сборке креста в обычном кубике нас интересуют только ребра с двумя наклейками, одна из которых белая. Ищем их и ставим их на верхнюю сторону к белому центру. Можете это делать любым известным вам способом, например так:</p>

    <p>Представляем, что перед нами трехэтажный дом и сначала ищем белые ребра на втором этаже, если находим, то в один ход отправляем такое ребро на крышу. Если на втором этаже нет, то ищем на третьем, если там нет, то на первом этаже, ну а если и там нет, то в подвале. Находим, берем призму так, чтобы эти ребра сначала были на передней грани, и крутим эту грань так, чтобы ребро оказалось на втором этаже. Ну а со второго этаже уже легко ставим его на крышу к белому центру. Все ребра в этой головоломке одинаковые, а значит крест у нас всегда будет получаться «правильный» и перестановки элементов креста не потребуется.</p>
    """
    static let st1_url = "aaaaaaaaaaa"
    
    static let st2_title = "2. Правильный белый крест"
    static let st2_description = """
    <p>Теперь нам нужно правильно развернуть центры среднего слоя, т.к. они в этой головоломке не плоские, а чуть выпуклые, а значит имеет значение то, как они повернуты. Поэтому мы переворачиваем головоломку собранным крестом вниз и смотрим на центры среднего слоя (красные квадраты на картинке).</p>

    <p style="text-align:center"><img src="cylinder_2_1.xml" width="20%%"></p>

    <p>Совмещаются ли они (\"дружат\" ли) с ребрами нашего собранного белого креста (зелеными элементами ребер)? И если какой-то центр не дружит с ребром, то его надо повернуть на 90 градусов. Как же это сделать так, чтобы наш крест при этом не пострадал?</p>
    
    <p>Очень просто. Берем кубик так, чтобы такой «недружный» центр был справа. Поднимаем белое ребро с нижней на верхнюю грань (<b>R2</b>) и отводим его на переднюю грань (<b>U</b>). Теперь поворачиваем правую грань на 90 градусов (<b>R</b>) и возвращаем белое ребро обратно, т.е. делаем <b>U’ R2’</b>.</p>
    
    <p>Алгоритм: <b>R2 U R U’ R2’</b></p>
    """
    static let st2_url = "aaaaaaaaaaa"
    
    static let st3_title = "3. Уголки первого слоя"
    static let st3_description = """
    <p>Теперь поставим на свои места углы первого слоя. Т.е. элементы с двумя наклейками, одна из которых белая (цвета собранного креста). Тут тоже все очень просто, находим уголок с белой наклейкой на верхнем слое головоломки (на крыше), поворачиваем крышу так, чтобы под ним было какое-то, незанятое еще место и делаем пиф-пафы до тех пор, пока уголок не встанет как надо.</p>

    <p style="text-align:center"><img src="cylinder_3_1.xml" width="20%%"></p>

    <p>Алгоритм: <b>R U R’ U’</b></p>

    <p>Если же на крыше нет белых уголков, а нижний слой еще не собран, значит какой-то из уголков стоит на своем месте, но просто неправильно развернут. В этом случае, берем головоломку так, чтобы такой уголок был спереди, справа, снизу и опять делаем пиф-пафы до тех пор, пока он не встанет как надо.</p>
    
    <p>Естественно, что для постановки уголков на свои места вы можете использовать любые известные вам алгоритмы (антипиф-пафы, английские пиф-пафы и т.д.)</p>
    """
    static let st3_url = "aaaaaaaaaaa"
    
    static let st4_title = "4. Ребра второго слоя"
    static let st4_description = """
    <p>После уголков, как и обычном кубике 3х3, будем ставить на свои места ребра второго слоя. В этой головоломке, ориентация центров второго слоя имеет значения (помните мы их разворачивали на втором этапе), а значит, мы не можем использовать \"ромашки\" от Максима Чечнева. Поэтому, в этой головоломке, мне кажется, лучше подойдут алгоритмы из моей методики для новичков. Надеюсь, вы сами поймете почему они очень удобны, когда будете ставить последнее ребро. Этот этап можно разделить на два подэтапа. Первый - установка всех ребер, кроме последнего. Второй – установка последнего ребра так, чтобы избежать паритета.</p>
    
    <p>На данном этапе мы будем ставить на свои места одноцветные ребра, цвета среднего слоя. Для начала, пытаемся найти такое ребро на верхней грани, если находим, то крутим крышу так, чтобы это ребро встало слева от любого незанятого места на втором этаже.</p>
    <p>Теперь перехватываем головоломку так, чтобы ребро и его место были на левой грани,</p>

    <p style="text-align:center"><img src="cylinder_4_1.xml" width="20%%"></p>

    <p>и делаем сначала жирный простой пиф-паф, а потом жирный английский пиф-паф, т.е. <b>(Rw U Rw’ U’) (Rw’ F Rw F’)</b></p>
    
    <p>Эта головоломка замечательна тем, что в ней не может быть ситуации «Желтый одуванчик», когда еще не все ребра второго слоя установлены на свои места, а одноцветных ребер на крыше нет. Поэтому, просто повторяем эти действия до тех пор, пока на крыше не окажется только одно ребро среднего слоя.</p>
    
    <p>Установку этого, последнего ребра среднего слоя рассмотрим отдельно. Все дело в том, что как я уже сказал выше, в кубике нельзя перевернуть только одно ребро, можно только два. Поэтому если вы последнее ребро среднего слоя поставите неправильно, то вы не сможете развернуть как надо четыре верхних ребра на следующем этапе и получите паритет.</p>

    <p>Как же определить правильно ли мы ставим последнее ребро или нет? На самом деле все очень просто, берем головоломку так же, как и до этого, т.е. ребром и его местом слева. Теперь пробуем ходом L’ поднять ребро, находящееся на втором этаже на крышу. И смотрим на крышу, если там «пуля», «бумеранг» или «палка», т.е. количество ребер, которые смотрят желтой наклейкой вверх четное, значит все хорошо, возвращаем ребро на второй этаж (L) и ставим одноцветное ребро, как и предыдущие. <b>(Rw U Rw’ U’) (Rw’ F Rw F’)</b></p>
    
    <p>А вот если получается, что количество ребер на верхней грани, которые смотрят желтой наклейкой вверх нечетное, т.е. одно или три, то возвращаем ребро на второй этаж (L), затем отводим наше одноцветное ребро на правую грань (U2)</p>

    <p style="text-align:center"><img src="cylinder_4_2.xml" width="20%%"></p>

    <p>и делаем все те же два жирных пиф-пафа, но в другой последовательности, т.е. сначала жирный английский пиф-паф, а потом жирный простой пиф-паф <b>(Rw’ F Rw F’) (Rw U Rw’ U’)</b></p>
    """
    static let st4_url = "aaaaaaaaaaa"
    
    static let st5_title = "5. Верхний крест"
    static let st5_description = """
    <p>Осталось собрать <a href="rg2://ytplay?time=0:00&link=aaaaaaaaaaa">последний слой.</a> Начнем как обычно с креста. Как и в кубике 3х3, на этом этапе видим только оружие, т.е. только три ситуации: \"пулю\", \"палку\" или \"бумеранг\". И решаем их абсолютно так же, т.е. едем в Лондон, делаем нужное количество пиф-пафов, возвращаемся из Лондона.</p>

    <p>1. <a href="rg2://ytplay?time=0:00&link=aaaaaaaaaaa">Палка</a></p>
    <p>Взять палку горизонтально, уехать в Лондон, пиф-паф, вернуться из Лондона.</p>
    <p style="text-align:center"><img src="cylinder_5_1.xml" width="20%%"></p>

    <p>Алгоритм: <b>F (R U R’ U’) F’</b></p>
    
    <p>2. <a href="rg2://ytplay?time=0:00&link=aaaaaaaaaaa">Бумеранг</a></p>
    <p>Взять бумеранг так, чтобы он смотрел на 9 и на 12 часов, уехать в Лондон, два пиф-пафа, вернуться из Лондона.</p>
    <p style="text-align:center"><img src="cylinder_5_2.xml" width="20%%"></p>

    <p>Алгоритм: <b>F (R U R’ U’)(R U R’ U’) F’</b></p>

    <p>3. <a href="rg2://ytplay?time=0:00&link=aaaaaaaaaaa">Пуля</a></p>
    <p>Сделать палку, получим бумеранг, который нужно только лишь взять правильно, а потом решить.</p>
    <p style="text-align:center"><img src="cylinder_5_3.xml" width="20%%"></p>

    <p>Алгоритм: <b>F (R U R’ U’) F’ U2 F (R U R’ U’)(R U R’ U’) F’</b></p>

    <p>Если на этом этапе вам попалась <a href="rg2://ytplay?time=0:00&link=aaaaaaaaaaa">какая-то другая ситуация,</a> например,</p>
    <p style="text-align:center"><img src="cylinder_5_4.xml" width="30%%"></p>

    <p><i>то у вас получился <b>Паритет N1.</b> Это значит, что вы неправильно установили последнее ребро второго слоя на предыдущем этапе. В этом случае, сначала поставьте любое желтое ребро на второй этаж вместо любого другого стоящего там ребра, а затем установите поднятое со второго этажа ребро уже правильно (см. установку последнего ребра на предыдущем этапе).</i></p>
    """
    static let st5_url = "aaaaaaaaaaa"
    
    static let st6_title = "6. Разворот уголков"
    static let st6_description = """
    <p>После креста, осталось только \"докрасить крышу\", т.е. развернуть уголки верхнего слоя. Поскольку ориентация желтого центра в этой головоломке не имеет значения, то вы можете это сделать хоть новичковым методом, т.е. пиф-пафами, хоть продвинутым используя \"Рыбки\" (R U R’ U) R U2 R’ или прочие алгоритмы из Ускорений или OLL для кубика 3х3. И поскольку все ребра и все углы в этой головоломке одинаковые, то это будет последний этап в сборке.</p>

    <p>Например, развернем уголки используя только Рыбки. Для этого смотрим на то, сколько углов стоят неправильно, т.е. не желтой наклейкой вверх. Тут может быть только три основных ситуации.</p>
    
    <p>1. <a href="rg2://ytplay?time=0:00&link=aaaaaaaaaaa">Три уголка</a> не на своем месте (базовая)</p>
    <p style="text-align:center"><img src="cylinder_6_1.xml" width="20%%"></p>

    <p>Берем правильно стоящим уголком к себе слева и делаем \"Рыбку\". Если не получилось с первого раза, значит снова поворачиваем собранным уголком к себе слева и делаем \"Рыбку\" еще раз.</p>
    
    <p>2. <a href="rg2://ytplay?time=0:00&link=aaaaaaaaaaa">Четыре уголка</a> не на своем месте</p>
    <p style="text-align:center"><img src="cylinder_6_2.xml" width="20%%"></p>

    <p>Если неверно стоят все четыре уголка, то взять нужно так, чтобы желтая наклейка у левого ближнего угла была слева, выполнить \"Рыбку\", получим ситуацию с тремя неверно стоящими уголками, которую уже знаем как решать. Поставить \"Рыбку\" головой к себе слева и выполнить алгоритм еще раз.

    <p>3. <a href="rg2://ytplay?time=0:00&link=aaaaaaaaaaa">Два уголка</a> не на своем месте</p>
    <p style="text-align:center"><img src="cylinder_6_3.xml" width="20%%"></p>

    <p>Если не на месте только два любых уголка, то желтая наклейка левого ближнего уголка должна смотреть на вас. Опять же делаем \"Рыбку\", получаем ситуацию с тремя уголками, которую решаем за два выполнения \"Рыбки\".</p>

    <p>Алгоритм: <b>(R U R’ U) R U2 R’</b></p>

    <p>Конечно же, можно решать этот этап и <a href="rg2://ytplay?time=0:00&link=aaaaaaaaaaa">еще быстрее,</a> используя OLL-алгоритмы, благо определить доставшуюся OLL ситуацию не составляет труда. Сложности могут возникнуть разве, что с вращением данной головоломки, поскольку из-за скошенных углов это не всегда удобно.</p>
    """
    static let st6_url = "aaaaaaaaaaa"
    
}
