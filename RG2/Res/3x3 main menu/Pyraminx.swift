//
//  Pyraminx.swift
//  RG2
//
//  Created by Anton on 03/04/2019.
//  Copyright © 2019 RubicsGuide. All rights reserved.
//

import Foundation

struct Pyraminx: Phases {
    func phase() -> String {
        let phase = "PYRAMINX"
        return phase
    }
    
    func titles() -> [String] {
        return title
    }
    
    func images() -> [String] {
        return image
    }
    
    func descs() -> [String] {
        return description
    }
    
    func urls() -> [String] {
        return url
    }
    
    func comments() -> [String] {
        return []
    }
    
    let title = [
        st1_title,
        st2_title,
        st3_title,
        st4_title,
        st5_title
    ]
    
    let image = [
        "pyraminx_1",
        "pyraminx_2",
        "pyraminx_3",
        "pyraminx_4",
        "pyraminx_5"
    ]
    
    let url = [
        st1_url,
        st2_url,
        st3_url,
        st4_url,
        st5_url
    ]
    
    
    let description = [
        st1_description,
        st2_description,
        st3_description,
        st4_description,
        st5_description
    ]
    
    
    static let st1_title = "Особенности головоломки"
    static let st1_description = """
    <p>Пирамидка, довольно простая головоломка, ”число бога”, т.е. максимальное количество ходов для ее сборки из любой ситуации всего 11, а если учесть, что 4 хода в таком случае, это вращения уголков, то получается, что ребра и центры можно собрать из любой позиции всего за 7 ходов. Метод кейхол (keyhole) является скоростным методом сборки пирамидки, хотя и не гарантирует того, что вы соберете головоломку за 11 ходов, но даже в самой сложной ситуации вам понадобится сделать не на много больше вращений, для ее сборки. Не смотря на то, что метод быстрый, он еще и очень простой в освоении и запоминании, т.к. в нем используются только простые четырехходовые алгоритмы и их совсем немного, более того, они очень интуитивны и понятны.</p>

    <p>Для начала несколько слов о самой головоломке и о том, из чего она состоит. В ней есть:</p>

    <p>1. Четыре уголка</p>

    <p style="text-align:center"><img src="pyraminx_1_1.xml" width="20%%"></p>
    
    <p>элементы с тремя наклейками, которые вращаются независимо от других элементов пирамидки.</p>
    
    <p>2. Шесть ребер</p>

    <p style="text-align:center"><img src="pyraminx_1_2.xml" width="20%%"></p>

    <p>элементы с двумя наклейками.</p>

    <p>3. И четыре центра или радиатора.</p>

    <p style="text-align:center"><img src="pyraminx_1_3.xml" width="20%%"></p>

    <p>Центры - это элементы с тремя наклейками, как и углы, но это не крайние элементы пирамидки. Как и ребра, три таких элемента на одной стороне образуют знак “радиации”, поэтому их довольно легко с ними перепутать, но центры примыкают к уголкам, а ребра нет. Для сборки головоломки очень важно научиться отличать ребра от центров.</p>

    <p>Кратко последовательность сборки пирамидки методом кейхол выглядит так:</p>
    
    <p>0. Ориентация уголков.<br/>
    1. Сборка блока состоящего из одного центра и двух ребер.<br/>
    2. Сборка креста на противоположной блоку грани.<br/>
    3. Дополнение собранного блока еще одним ребром.<br/>
    4. И последний, заключительный этап - это перестановка последних 3 ребер.</p>

    <p>Я не зря ориентацию уголков обозначил как нулевой этап. Ведь чтобы поставить уголки правильно, не нужно знать никаких алгоритмов и во всех методиках это делается абсолютно одинаково. Надо просто повернуть все четыре уголка так, чтобы они “дружили” по цвету со своими центрами (радиаторами). Делается это очень интуитивно, просто крутим уголок, который “не дружит” со своим центром в любую сторону, пока он с ним “не подружится”. Т.е. по сути, этот этап не имеет отношения непосредственно к методу кейхол.</p>
    """
    static let st1_url = ""
    
    static let st2_title = "Первый блок"
    static let st2_description = """
    <p>Кейхол (Keyhole) - в переводе с английского означает “замочная скважина”, т.е. место под ключ, а почему методика так называется, надеюсь, станет понятно на следующем этапе сборке.</p>

    <p>Итак, первый этап: сборка блока состоящего из центра и двух ребер.</p>
    
    <p>Ищем любой центр, на который мы будем ориентироваться, и два ребра с таким же цветами, которые должны стоять рядом с ним. Собираем из них вот такой блок.</p>
    
    <p style="text-align:center"><img src="pyraminx_2.xml" width="20%%"></p>
    
    <p>Если есть какое-то ребро, которое уже стоит рядом со своим центром, то лучше начать сборку именно с такой пары, т.к. в этом случае для сборки блока необходимо будет добавить к уже существующему блоку всего лишь одно ребро. Важно понимать, что любое ребро можно поставить рядом с центром на свое место максимум за три хода, но в большинстве случаев достаточно двух или даже одного вращения.</p>

    <p>Тут все интуитивно и поскольку свободы действий еще довольно много, то сложностей с установкой ребер не должно возникнуть. Ну а если что-то не получается, то вы можете посмотреть в видео, как нужно собирать такой блок.</p>
    """
    static let st2_url = ""
    
    static let st3_title = "Крест на противоположной стороне"
    static let st3_description = """
    <p>Чтобы собрать крест на противоположной грани, первым делом, надо определиться c цветом этого креста. Для этого достаточно посмотреть на цвета нашего собранного блока и понять, какого цвета из четырех в нем нет. В нашем случае – желтого. Соответственно, нам нужно собрать желтый крест на противоположной блоку грани, а чтобы было проще это сделать, возьмем головоломку так, чтобы наш собранный блок был снизу слева, а крест в таком случае будем собирать на правой грани. Вот так:</p>

    <p style="text-align:center"><img src="pyraminx_2.xml" width="15%%"> => <img src="pyraminx_3_1.xml" width="15%%"></p>

    <p>А для того, чтобы развернуть все центры как нам надо, мы как раз и будем использовать третье, незанятое ребро, примыкающее к центру нашего блока сверху, т.е. благодаря тому, что это место у нас не занято, мы можем свободно вращать правую и верхнюю грани. Это и есть \"ключевой\" момент сборки головоломки, точнее замочная скважина (keyhole) к ключику, который мы установим на следующем этапе.</p>
    
    <p>Смотрим на правую грань и ищем “не желтые” центры. Если какой-то из центров “не желтый”, то поворачиваем правую грань так, чтобы он оказался сверху и крутим верхнюю грань так, чтобы верхний центр стал смотреть желтой наклейкой направо.</p>

    <p style="text-align:center"><img src="pyraminx_3_2.xml" width="20%%"></p>

    <p>Повторяем для всех “не желтых” центров. Ставим их сверху и разворачиваем центр как надо. Должна получиться вот такая ситуация:</p>

    <p style="text-align:center"><img src="pyraminx_3.xml" width="20%%"></p>
    """
    static let st3_url = ""
    
    static let st4_title = "Третье ребро блока"
    static let st4_description = """
    <p>Теперь смотрим на левую часть (собранный на первом этапе блок) сверху, какого по цвету элемента там не хватает:</p>

    <p style="text-align:center"><img src="pyraminx_4_1.xml" width="20%%"></p>

    <p>В нашем случае, не хватает сине-зелёного ребра. Вот его и надо установить на свое место на этом этапе. И тут возможны две основные ситуации:</p>
    <p>1. Нужное нам ребро на правой грани.<br/>
    2. Ребро стоит на своем месте, но перевернуто.</p>
    
    <p>Ну и третья, когда ребро стоит на своем месте как надо, но в этом случае просто переходим к следующему этапу.</p>

    <p>1. Ребро на правой грани.</p>
    
    <p>Все очень просто, ставим его так, чтобы оно НЕ дружило по цвету с блоком, т.е. так:</p>

    <p style="text-align:center"><img src="pyraminx_4_2.xml" width="20%%"></p>

    <p>или так</p>

    <p style="text-align:center"><img src="pyraminx_4_3.xml" width="20%%"></p>

    <p>И теперь переворачиваем головоломку так, чтобы блок находился сверху, а ребро смотрело прямо на нас, т.е. так:</p>

    <p style="text-align:center"><img src="pyraminx_4_4.xml" width="15%%"> или <img src="pyraminx_4_5.xml" width="15%%"></p>

    <p>Смотрим на то, с какой стороны оказалось место этого ребра, и сначала отводим само ребро в другую сторону наверх, опускаем его место на нижнюю грань и возвращаем все назад, т.е. для ситуации, когда место ребра справа:</p>

    <p style="text-align:center"><img src="pyraminx_4_4.xml" width="20%%"></p>

    <p>Алгоритм: <b>L’ R’ L R</b></p>

    <p>А для ситуации, когда место ребра слева:</p>

    <p style="text-align:center"><img src="pyraminx_4_5.xml" width="20%%"></p>

    <p>Алгоритм: <b>R L R’ L’</b></p>

    <p>2. Если же ребро стоит на своем месте, но перевернуто.</p>

    <p style="text-align:center"><img src="pyraminx_4_6.xml" width="15%%">=><img src="pyraminx_4_7.xml" width="15%%"></p>
    
    <p>То опять же берем головоломку блоком вверх и при помощи соответствующего алгоритма из вышеприведенной ситуации ставим вместо этого неверно стоящего ребра любое другое, тем самым выгнав нужное нам ребро на нижний слой. Далее, крутим нижнюю грань так, чтобы ребро встало под противоположным центром и ставим его на место при помощи этого же алгоритма.</p>

    <p>Алгоритм: <b>(L’ R’ L R) D (L’ R’ L R)</b></p>
    """
    static let st4_url = ""
    
    static let st5_title = "Последние три ребра"
    static let st5_description = """
    <p>Перехватываем головоломку так, чтобы крест (знак радиации), который мы собирали на втором этапе, был прямо перед нами.  И тут мы видим одну из пяти ситуаций. Для решения которых, нам будет достаточно двух алгоритмов – правого и левого пиф-пафов. Соответственно у нас будут две базовые ситуации, которые решаются одним из пиф-пафов и три чуть более сложные ситуации, которые при помощи все тех же пиф-пафов сначала приводятся к одной из базовых.</p>

    <p>Базовые ситуации:</p>

    <p>Отличительная особенность – нет ни одного ребра на своем месте и два ребра перевернуты. В этом случае смотрим на вторую наклейку неперевернутого (правильно ориентированного) ребра. Надо взять головоломку так, чтобы это неперевернутое ребро было одним из верхних, и при этом другая боковая сторона головоломки была цвета второй наклейки этого ребра. И сделать противоположный нашему правильно ориентированному ребру пиф-паф.</p>

    <p>Первая (базовая) ситуация, правильно ориентированное ребро слева.</p>

    <p style="text-align:center"><img src="pyraminx_5_1.xml" width="20%%"></p>

    <p>в этой ситуации нам надо сделать всем знакомый правый пирамидный пиф-паф. <b>R' L R L'</b></p>

    <p>Вторая (базовая) ситуация, правильно ориентированное ребро справа.</p>

    <p style="text-align:center"><img src="pyraminx_5_2.xml" width="20%%"></p>

    <p>в этой ситуации нам надо сделать всем знакомый левый пирамидный пиф-паф. <b>L R' L' R</b></p>
    
    """
    static let st5_url = ""
    
}
